


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ***********************/
    2 00000000         ; OSasm.s: low-level OS commands, written in assembly   
                                           */
    3 00000000         ; Runs on LM4F120/TM4C123
    4 00000000         ; A very simple real time operating system with minimal 
                       features.
    5 00000000         ; Daniel Valvano
    6 00000000         ; January 29, 2015
    7 00000000         ;
    8 00000000         ; This example accompanies the book
    9 00000000         ;  "Embedded Systems: Real Time Interfacing to ARM Corte
                       x M Microcontrollers",
   10 00000000         ;  ISBN: 978-1463590154, Jonathan Valvano, copyright (c)
                        2015
   11 00000000         ;
   12 00000000         ;  Programs 4.4 through 4.12, section 4.2
   13 00000000         ;
   14 00000000         ;Copyright 2015 by Jonathan W. Valvano, valvano@mail.ute
                       xas.edu
   15 00000000         ;    You may use, edit, run or distribute this file
   16 00000000         ;    as long as the above copyright notice remains
   17 00000000         ; THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHE
                       THER EXPRESS, IMPLIED
   18 00000000         ; OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED W
                       ARRANTIES OF
   19 00000000         ; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE A
                       PPLY TO THIS SOFTWARE.
   20 00000000         ; VALVANO SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR
                        SPECIAL, INCIDENTAL,
   21 00000000         ; OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
   22 00000000         ; For more information about my classes, my research, an
                       d my books, see
   23 00000000         ; http://users.ece.utexas.edu/~valvano/
   24 00000000         ; */
   25 00000000 400253FC 
                       GPIO_PORTF_DATA_R
                               EQU              0x400253FC
   26 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   27 00000000                 THUMB
   28 00000000                 REQUIRE8
   29 00000000                 PRESERVE8
   30 00000000         
   31 00000000                 EXTERN           RunPt       ; currently running
                                                             thread
   32 00000000         
   33 00000000                 EXPORT           StartOS
   34 00000000                 EXPORT           SysTick_Handler
   35 00000000                 EXPORT           PendSV_Handler
   36 00000000                 IMPORT           Scheduler
   37 00000000                 EXTERN           OS_Recorder
   38 00000000         
   39 00000000         PendSV_Handler                       ; 1) Saves R0-R3,R1
                                                            2,LR,PC,PSR
   40 00000000         
   41 00000000         
   42 00000000         
   43 00000000 B672            CPSID            I           ; 2) Prevent interr



ARM Macro Assembler    Page 2 


                                                            upt during switch
   44 00000002 B500            PUSH             {LR}
   45 00000004 F7FF FFFE       BL               OS_Recorder
   46 00000008 F85D EB04       POP              {LR}
   47 0000000C E92D 0FF0       PUSH             {R4-R11}    ; 3) Save remaining
                                                             regs r4-11
   48 00000010 481C            LDR              R0, =RunPt  ; 4) R0=pointer to 
                                                            RunPt, old thread
   49 00000012 6801            LDR              R1, [R0]    ;    R1 = RunPt
   50 00000014 F8C1 D000       STR              SP, [R1]    ; 5) Save SP into T
                                                            CB
   51 00000018 6849            LDR              R1, [R1,#4] ; 6) R1 = RunPt->ne
                                                            xt
   52 0000001A 6001            STR              R1, [R0]    ;    RunPt = R1
   53 0000001C         
   54 0000001C B501            PUSH             {R0, LR}
   55 0000001E F7FF FFFE       BL               Scheduler
   56 00000022 E8BD 4001       POP              {R0, LR}
   57 00000026 6801            LDR              R1, [R0]
   58 00000028         
   59 00000028 F8D1 D000       LDR              SP, [R1]    ; 7) new thread SP;
                                                             SP = RunPt->sp;
   60 0000002C E8BD 0FF0       POP              {R4-R11}    ; 8) restore regs r
                                                            4-11
   61 00000030 B662            CPSIE            I           ; 9) tasks run with
                                                             interrupts enabled
                                                            
   62 00000032 4770            BX               LR          ; 10) restore R0-R3
                                                            ,R12,LR,PC,PSR
   63 00000034         
   64 00000034         
   65 00000034         SysTick_Handler                      ; 1) Saves R0-R3,R1
                                                            2,LR,PC,PSR
   66 00000034 B672            CPSID            I           ; 2) Prevent interr
                                                            upt during switch
   67 00000036 B500            PUSH             {LR}
   68 00000038 F7FF FFFE       BL               OS_Recorder
   69 0000003C F85D EB04       POP              {LR}
   70 00000040 E92D 0FF0       PUSH             {R4-R11}    ; 3) Save remaining
                                                             regs r4-11
   71 00000044 480F            LDR              R0, =RunPt  ; 4) R0=pointer to 
                                                            RunPt, old thread
   72 00000046 6801            LDR              R1, [R0]    ;    R1 = RunPt
   73 00000048 F8C1 D000       STR              SP, [R1]    ; 5) Save SP into T
                                                            CB
   74 0000004C         ;LDR     R1, [R1,#4]        ; 6) R1 = RunPt->next
   75 0000004C         ;STR     R1, [R0]           ;    RunPt = R1
   76 0000004C         
   77 0000004C B501            PUSH             {R0,LR}
   78 0000004E F7FF FFFE       BL               Scheduler
   79 00000052 E8BD 4001       POP              {R0,LR}
   80 00000056 6801            LDR              R1, [R0]
   81 00000058         
   82 00000058 F8D1 D000       LDR              SP, [R1]    ; 7) new thread SP;
                                                             SP = RunPt->sp;
   83 0000005C E8BD 0FF0       POP              {R4-R11}    ; 8) restore regs r
                                                            4-11
   84 00000060         
   85 00000060 B662            CPSIE            I           ; 9) tasks run with



ARM Macro Assembler    Page 3 


                                                             interrupts enabled
                                                            
   86 00000062 4770            BX               LR          ; 10) restore R0-R3
                                                            ,R12,LR,PC,PSR
   87 00000064         
   88 00000064         ;HardFault_Handler
   89 00000064         ;BX      LR  
   90 00000064         
   91 00000064         StartOS
   92 00000064 4807            LDR              R0, =RunPt  ; currently running
                                                             thread
   93 00000066 6802            LDR              R2, [R0]    ; R2 = value of Run
                                                            Pt
   94 00000068 F8D2 D000       LDR              SP, [R2]    ; new thread SP; SP
                                                             = RunPt->stackPoin
                                                            ter;
   95 0000006C E8BD 0FF0       POP              {R4-R11}    ; restore regs r4-1
                                                            1
   96 00000070 BC0F            POP              {R0-R3}     ; restore regs r0-3
                                                            
   97 00000072 F85D CB04       POP              {R12}
   98 00000076 F85D EB04       POP              {LR}        ; discard LR from i
                                                            nitial stack
   99 0000007A F85D EB04       POP              {LR}        ; start location
  100 0000007E BC02            POP              {R1}        ; discard PSR
  101 00000080 B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
  102 00000082 4770            BX               LR          ; start first threa
                                                            d
  103 00000084         
  104 00000084                 ALIGN
  105 00000084                 END
              00000000 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\osasm.
d -o.\osasm.o -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\
Inc\Luminary --predefine="__MICROLIB SETA 1" --list=.\osasm.lst OSasm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 26 in file OSasm.s
   Uses
      None
Comment: .text unused
PendSV_Handler 00000000

Symbol: PendSV_Handler
   Definitions
      At line 39 in file OSasm.s
   Uses
      At line 35 in file OSasm.s
Comment: PendSV_Handler used once
StartOS 00000064

Symbol: StartOS
   Definitions
      At line 91 in file OSasm.s
   Uses
      At line 33 in file OSasm.s
Comment: StartOS used once
SysTick_Handler 00000034

Symbol: SysTick_Handler
   Definitions
      At line 65 in file OSasm.s
   Uses
      At line 34 in file OSasm.s
Comment: SysTick_Handler used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

GPIO_PORTF_DATA_R 400253FC

Symbol: GPIO_PORTF_DATA_R
   Definitions
      At line 25 in file OSasm.s
   Uses
      None
Comment: GPIO_PORTF_DATA_R unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OS_Recorder 00000000

Symbol: OS_Recorder
   Definitions
      At line 37 in file OSasm.s
   Uses
      At line 45 in file OSasm.s
      At line 68 in file OSasm.s

RunPt 00000000

Symbol: RunPt
   Definitions
      At line 31 in file OSasm.s
   Uses
      At line 48 in file OSasm.s
      At line 71 in file OSasm.s
      At line 92 in file OSasm.s

Scheduler 00000000

Symbol: Scheduler
   Definitions
      At line 36 in file OSasm.s
   Uses
      At line 55 in file OSasm.s
      At line 78 in file OSasm.s

3 symbols
341 symbols in table
